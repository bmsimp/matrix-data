name: Matrix Data Compatibility Test

on:
  pull_request:
    paths:
      - '**/*.md'
      - '.github/workflows/matrix-compatibility.yml'
      - 'scripts/test-markdown.js'

jobs:
  # Check if matrix data or parser was changed
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix-changed: ${{ steps.changes.outputs.matrix-data }}
      test-script-changed: ${{ steps.changes.outputs.test-script }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive  # Important for submodule support
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            matrix-data:
              - '**/*.md'
            test-script:
              - 'scripts/test-markdown.js'

  test-matrix-compatibility:
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.matrix-changed == 'true' || needs.check-changes.outputs.test-script-changed == 'true' }}
    
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive  # This ensures matrix data is available
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Verify matrix data is available
        run: |
           # Dynamically find all directories that contain markdown files
           FOUND_TYPES=()
           
           # Look for directories that contain .md files (excluding hidden dirs and common non-product dirs)
           for dir in */; do
             if [ -d "$dir" ] && [ ! "$dir" = ".git/" ] && [ ! "$dir" = "scripts/" ] && [ ! "$dir" = ".github/" ]; then
               # Check if this directory contains markdown files
               if find "$dir" -name "*.md" -type f | head -1 | grep -q .; then
                 FOUND_TYPES+=("${dir%/}")
               fi
             fi
           done
           
           if [ ${#FOUND_TYPES[@]} -eq 0 ]; then
             echo "‚ùå No matrix data directories found!"
             echo "Expected to find directories containing .md files"
             echo "Make sure the mspgeek/matrix-data repository is properly configured."
             exit 1
           fi
           
           echo "‚úÖ Matrix data directories found: ${FOUND_TYPES[*]}"
           echo "Matrix data structure:"
           for type in "${FOUND_TYPES[@]}"; do
             echo "  $type/:"
             ls -la "$type/" | head -5
           done
           
           # Check if we're in the matrix-data repository root
           if [ -f "README.md" ] && grep -q "Product Matrix Data" README.md 2>/dev/null; then
             echo "üìÅ Detected matrix-data repository structure"
             echo "Current commit: $(git rev-parse HEAD)"
             echo "Current branch: $(git branch --show-current)"
             echo "Remote origin: $(git remote get-url origin)"
           fi
      
      - name: Get changed matrix files
        id: changed-files
        run: |
           # Dynamically find all directories that contain markdown files
           FOUND_TYPES=()
           for dir in */; do
             if [ -d "$dir" ] && [ ! "$dir" = ".git/" ] && [ ! "$dir" = "scripts/" ] && [ ! "$dir" = ".github/" ]; then
               if find "$dir" -name "*.md" -type f | head -1 | grep -q .; then
                 FOUND_TYPES+=("${dir%/}")
               fi
             fi
           done
           
           # Get list of changed markdown files in product type directories
           CHANGED_FILES=""
           
           for type in "${FOUND_TYPES[@]}"; do
             TYPE_CHANGES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.(md)$' | grep "^$type/" || true)
             if [ -n "$TYPE_CHANGES" ]; then
               CHANGED_FILES="$CHANGED_FILES$TYPE_CHANGES"$'\n'
             fi
           done
           
           # Remove trailing newline and store
           CHANGED_FILES=$(echo "$CHANGED_FILES" | sed '/^$/d')
           echo "changed_files<<EOF" >> $GITHUB_OUTPUT
           echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
           
           # Count changed files for reporting
           CHANGED_COUNT=$(echo "$CHANGED_FILES" | grep -c . || echo "0")
           echo "changed_count=$CHANGED_COUNT" >> $GITHUB_OUTPUT
           
           echo "Found product types: ${FOUND_TYPES[*]}"
           echo "Changed matrix files:"
           echo "$CHANGED_FILES"
           echo "Total changed files: $CHANGED_COUNT"
           
           # If no matrix files changed but test script changed, do full scan
           if [ "$CHANGED_COUNT" -eq 0 ] && [ "${{ needs.check-changes.outputs.test-script-changed }}" == "true" ]; then
             echo "No matrix files changed, but test script changed - will do full scan"
             echo "full_scan=true" >> $GITHUB_OUTPUT
           else
             echo "full_scan=false" >> $GITHUB_OUTPUT
           fi
      
      - name: Run Matrix compatibility tests
        run: node scripts/test-markdown.js
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
          CHANGED_COUNT: ${{ steps.changed-files.outputs.changed_count }}
          FULL_SCAN: ${{ steps.changed-files.outputs.full_scan }}
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read test results
            let testResults = '';
            try {
              testResults = fs.readFileSync('markdown-test-results.md', 'utf8');
            } catch (error) {
              testResults = 'Test results could not be generated.';
            }
            
            // Get changed files info
            const changedCount = process.env.CHANGED_COUNT || '0';
            const changedFiles = process.env.CHANGED_FILES || '';
            const fullScan = process.env.FULL_SCAN === 'true';
            
            // Create comment with changed files info
            let changedFilesInfo = '';
            if (changedCount > 0) {
              changedFilesInfo = `\n\n### üìÅ Changed Matrix Files (${changedCount})\n\n${changedFiles.split('\n').filter(f => f.trim()).map(f => `- \`${f}\``).join('\n')}`;
            } else if (fullScan) {
              changedFilesInfo = `\n\n### üîç Full Matrix Scan\n\n*No matrix files changed, but test script was updated - running full compatibility check.*`;
            }
            
                         const comment = `## üìã Matrix Data Compatibility Test Results${changedFilesInfo}
             
             ${testResults}
             
             ---
             *This test validates that all Markdown files in the product type directories (from [mspgeek/matrix-data](https://github.com/mspgeek/matrix-data)) follow the expected structure and can be parsed correctly by the application.*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Matrix Data Compatibility Test Results')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
      
      - name: Upload test results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: matrix-test-results
          path: markdown-test-results.md
          retention-days: 30

  # Separate job for matrix data repository health check
  matrix-repo-health:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Check matrix repository status
        run: |
           echo "üîç Checking matrix repository health..."
           
           # Dynamically find all directories that contain markdown files
           FOUND_TYPES=()
           for dir in */; do
             if [ -d "$dir" ] && [ ! "$dir" = ".git/" ] && [ ! "$dir" = "scripts/" ] && [ ! "$dir" = ".github/" ]; then
               if find "$dir" -name "*.md" -type f | head -1 | grep -q .; then
                 FOUND_TYPES+=("${dir%/}")
               fi
             fi
           done
           
           if [ ${#FOUND_TYPES[@]} -eq 0 ]; then
             echo "‚ùå No matrix data directories found!"
             exit 1
           fi
           
           echo "üìÅ Found product types: ${FOUND_TYPES[*]}"
           
           # Check if we're in the matrix-data repository root
           if [ -f "README.md" ] && grep -q "Product Matrix Data" README.md 2>/dev/null; then
             echo "üìÅ Detected matrix-data repository structure"
             
             # Check repository status
             echo "üìä Matrix repository status:"
             echo "Current commit: $(git rev-parse HEAD)"
             echo "Current branch: $(git branch --show-current)"
             echo "Remote origin: $(git remote get-url origin)"
             echo "Last commit: $(git log -1 --format='%h - %s (%an, %ar)')"
             
             # Check for uncommitted changes
             if [ -n "$(git status --porcelain)" ]; then
               echo "‚ö†Ô∏è  Matrix repository has uncommitted changes:"
               git status --porcelain
             else
               echo "‚úÖ Matrix repository is clean"
             fi
             
             # Check for untracked files
             UNTRACKED=$(git ls-files --others --exclude-standard)
             if [ -n "$UNTRACKED" ]; then
               echo "‚ö†Ô∏è  Matrix repository has untracked files:"
               echo "$UNTRACKED"
             else
               echo "‚úÖ No untracked files in matrix repository"
             fi
           else
             echo "üìÅ Matrix data appears to be in subdirectory structure"
           fi
           
           echo "‚úÖ Matrix repository health check completed"
